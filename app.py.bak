import streamlit as st
import random
import time
import json
import os
from streamlit_autorefresh import st_autorefresh
from game_logic import Game, Player
from data import DOMAINS, get_items_for_domain

# Page config
st.set_page_config(
    page_title="Imposter / ÿ®ÿ±ŸëŸá ÿßŸÑÿ≥ÿßŸÑŸÅÿ©",
    page_icon="üé≤",
    layout="wide"
)

# Initialize session state
if 'game' not in st.session_state:
    st.session_state.game = None

# Create a directory for storing game states if it doesn't exist
os.makedirs('game_states', exist_ok=True)

def save_game_state(game):
    """Save game state to file"""
    if game:
        game_data = {
            'room_code': game.room_code,
            'phase': game.phase,
            'players': [{'name': p.name, 'is_host': p.is_host, 'score': p.score} for p in game.players],
            'min_players': game.min_players,
            'current_domain': game.current_domain,
            'current_item': game.current_item,
            'imposter': game.imposter.name if game.imposter else None,
            'discussion_end_time': game.discussion_end_time,
            'votes': game.votes,
            'most_voted_player': game.most_voted_player,
        }
        with open(f'game_states/{game.room_code}.json', 'w') as f:
            json.dump(game_data, f)

def load_game_state(room_code):
    """Load game state from file"""
    try:
        with open(f'game_states/{room_code}.json', 'r') as f:
            data = json.load(f)
            game = Game(data['room_code'])
            game.phase = data['phase']
            
            # Recreate players
            for p_data in data['players']:
                player = Player(p_data['name'], p_data['is_host'])
                player.score = p_data['score']
                game.add_player(player)
            
            game.min_players = data['min_players']
            game.current_domain = data['current_domain']
            game.current_item = data['current_item']
            
            # Set imposter
            if data['imposter']:
                game.imposter = next((p for p in game.players if p.name == data['imposter']), None)
            
            game.discussion_end_time = data['discussion_end_time']
            game.votes = data['votes']
            game.most_voted_player = data['most_voted_player']
            
            return game
    except FileNotFoundError:
        return None

def sync_game_state():
    """Sync game state with the stored state"""
    if st.session_state.game and hasattr(st.session_state.game, 'room_code'):
        stored_game = load_game_state(st.session_state.game.room_code)
        if stored_game:
            # Check if there's any change in game state
            current_phase = st.session_state.game.phase
            current_votes = st.session_state.game.votes.copy()
            
            # Always update the game state to ensure synchronization
            st.session_state.game = stored_game
            
            # Show update notification if something changed
            if current_phase != stored_game.phase:
                st.toast(f"Game phase changed to: {stored_game.phase} üîÑ")

def create_room():
    """Create a new game room"""
    if not st.session_state.get('player_name'):
        st.error("Please enter your name first")
        return
    
    # Generate room code
    room_code = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=4))
    game = Game(room_code)
    game.add_player(Player(st.session_state.player_name, is_host=True))
    st.session_state.game = game
    save_game_state(game)
    st.query_params['room'] = room_code
    st.query_params['name'] = st.session_state.player_name

def join_room():
    """Join an existing game room"""
    if not st.session_state.get('player_name') or not st.session_state.get('room_code'):
        st.error("Please enter both your name and room code")
        return
    
    room_code = st.session_state.room_code.upper()
    game = load_game_state(room_code)
    
    if game is None:
        st.error("Room not found!")
        return
    
    player = Player(st.session_state.player_name)
    game.add_player(player)
    st.session_state.game = game
    save_game_state(game)
    st.query_params['room'] = room_code
    st.query_params['name'] = st.session_state.player_name

def main():
    st.title("Imposter / ÿ®ÿ±ŸëŸá ÿßŸÑÿ≥ÿßŸÑŸÅÿ© üé≤")
    
    # Get query parameters and sync state
    if 'room' in st.query_params and 'name' in st.query_params:
        st.session_state.room_code = st.query_params['room']
        st.session_state.player_name = st.query_params['name']
        
        # Try to load existing game
        if st.session_state.game is None:
            stored_game = load_game_state(st.session_state.room_code)
            if stored_game:
                st.session_state.game = stored_game
    
    # Auto-refresh the page every 2 seconds
    count = st_autorefresh(interval=2000, key="game_refresh")
    sync_game_state()
    
    if st.session_state.game is None:
        # Login screen with instructions
        st.write("### How to Play:")
        st.write("1. One player creates a room and becomes the host")
        st.write("2. Other players join using the room code")
        st.write("3. The host starts the game when enough players have joined")
        st.divider()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üé≤ Create New Room")
            st.write("Choose this if you want to host a game")
            player_name = st.text_input("Your Name:", key="create_name", placeholder="Enter your name")
            if st.button("üéÆ Create Room & Become Host", use_container_width=True):
                st.session_state.player_name = player_name
                create_room()
        
        with col2:
            st.subheader("üéÆ Join Existing Room")
            st.write("Choose this to join someone else's game")
            room_code = st.text_input("Room Code:", key="join_room_code", placeholder="Enter 4-letter code", max_chars=4)
            player_name = st.text_input("Your Name:", key="join_name", placeholder="Enter your name")
            if st.button("üë• Join Room", use_container_width=True):
                st.session_state.player_name = player_name
                st.session_state.room_code = room_code
                join_room()
    
    else:
        game = st.session_state.game
        
        # Main layout - more mobile friendly
        st.subheader("üèÜ Scoreboard")
        # Sort players by score in descending order
        sorted_players = sorted(game.players, key=lambda x: x.score, reverse=True)
        
        # Show your score prominently
        for player in sorted_players:
            if player.name == st.session_state.player_name:
                st.markdown(f"**You:** {player.score} pts")
            else:
                st.write(f"{player.name}: {player.score} pts")
        
        # Room info
        st.divider()
        st.write(f"Room Code: {game.room_code} | Players: {len(game.players)}")
        if game.current_domain:
            st.write(f"Domain: {game.current_domain}")
        st.divider()

        # Game area - Phase handling
        if game.phase == "lobby":
            st.subheader("Lobby")
            st.write("Players in the room:")
            for player in game.players:
                st.write(f"- {player.name} {'(Host)' if player.is_host else ''}")
            
            # Show lobby status
            st.write(f"Number of players: {len(game.players)} (Minimum needed: {game.min_players})")
            
            # Debug info
            st.write("Current phase: lobby")
            st.write(f"Player name: {st.session_state.player_name}")
            st.write(f"Is host: {game.is_player_host(st.session_state.player_name)}")
            
            # Host controls
            if game.is_player_host(st.session_state.player_name):
                st.write("üëë You are the host")
                test_mode = st.checkbox("Enable Test Mode (2 players minimum)")
                if test_mode:
                    game.min_players = 2
                    save_game_state(game)
                
                if len(game.players) >= game.min_players:
                    if st.button("‚ñ∂Ô∏è Start Round"):
                        game.start_round()
                        save_game_state(game)
                        st.rerun()
                else:
                    st.warning(f"Need {game.min_players - len(game.players)} more players to start")
            else:
                st.info("Waiting for the host to start the game...")
            
            elif game.phase == "round_setup":
                # Debug info
                st.write("Current phase: round_setup")
                st.write(f"Player name: {st.session_state.player_name}")
                st.write(f"Is host: {game.is_player_host(st.session_state.player_name)}")
                
                if game.is_player_host(st.session_state.player_name):
                    st.subheader("üëë Host: Select Domain")
                    st.write("Choose a category for this round:")
                    domain = st.selectbox("Available domains:", DOMAINS, index=0)
                    if st.button("‚úÖ Start Round with Selected Domain"):
                        game.set_domain(domain)
                        game.select_item()
                        game.start_discussion()
                        save_game_state(game)
                        st.rerun()
                else:
                    st.info("üí≠ Waiting for the host to select a domain...")
            
            elif game.phase == "discussion":
                st.subheader("Discussion Phase")
                
                # Display role and item
                player_role = "Imposter!" if game.is_player_imposter(st.session_state.player_name) else f"Regular Player (Item: {game.current_item})"
                st.info(f"You are the {player_role}")
                
                # Chat/Discussion area
                st.write("Use this time to ask questions and discuss!")
                
                # Timer
                time_left = max(0, game.discussion_end_time - time.time())
                st.progress(time_left / game.discussion_duration)
                st.write(f"Time remaining: {int(time_left)} seconds")
                
                if game.is_player_host(st.session_state.player_name):
                    if st.button("End Discussion & Open Voting"):
                        game.start_voting()
                        save_game_state(game)
            
            elif game.phase == "voting":
                st.subheader("Voting Phase")
                
                if not game.has_player_voted(st.session_state.player_name):
                    st.write("Who do you think is the Imposter? Choose carefully!")
                    st.warning("Remember: You'll get 100 points if you guess correctly!")
                    
                    # Create a grid of player buttons
                    cols = st.columns(2)
                    for idx, player in enumerate(game.players):
                        if player.name != st.session_state.player_name:
                            with cols[idx % 2]:
                                if st.button(f"Vote for {player.name}"):
                                    game.submit_vote(st.session_state.player_name, player.name)
                                    save_game_state(game)
                else:
                    your_vote = game.votes.get(st.session_state.player_name)
                    st.info(f"You voted for: {your_vote}")
                    st.write("Waiting for other players to vote...")
                
                # Show progress bar for voting
                total_votes = len(game.votes)
                total_players = len(game.players)
                st.progress(total_votes / total_players)
                st.write(f"Votes: {total_votes}/{total_players}")
                
                if game.all_votes_submitted():
                    game.reveal_imposter()
                    save_game_state(game)
            
            elif game.phase == "reveal":
                st.subheader("Results")
                
                st.write(f"The Imposter was: {game.imposter.name}")
                
                # Show individual results
                st.write("\nVoting Results:")
                correct_voters = []
                for player in game.players:
                    if game.did_player_vote_correctly(player.name):
                        correct_voters.append(player.name)
                        if player.name == st.session_state.player_name:
                            st.success(f"üéâ Excellent! You identified the Imposter correctly! +100 points")
                            st.balloons()
                        else:
                            st.success(f"‚úÖ {player.name} identified the Imposter correctly (+100 points)")
                    else:
                        if player.name == st.session_state.player_name:
                            if player.name in game.votes:
                                voted_for = game.votes[player.name]
                                st.error(f"‚ùå You guessed {voted_for}, but it was incorrect")
                            else:
                                st.warning("‚ö†Ô∏è You didn't vote")
                
                if game.is_player_host(st.session_state.player_name):
                    if st.button("Proceed to Imposter Guess"):
                        game.start_imposter_guess()
                        save_game_state(game)
            
            elif game.phase == "imposter_guess":
                st.subheader("Imposter's Guess")
                
                if game.is_player_imposter(st.session_state.player_name):
                    options = game.get_guess_options()
                    st.write("Choose the item you think everyone else was discussing:")
                    
                    # Create a single column layout for better mobile compatibility
                    for option in options:
                        # Try to load and display an image for the item
                        image_path = f"item_images/{option.lower().replace(' ', '_')}.png"
                        if os.path.exists(image_path):
                            st.image(image_path, caption=option, width=200)
                        
                        if st.button(f"{option}", key=f"guess_{option}"):
                            game.submit_imposter_guess(option)
                            if option == game.current_item:
                                st.success("üéØ You got it! +100 points")
                            else:
                                st.error(f"‚ùå Wrong! The correct item was: {game.current_item}")
                            game.show_scores()
                            save_game_state(game)
                else:
                    st.write("Waiting for the Imposter to make their guess...")
                    st.info(f"The item was: {game.current_item}")
                    # Show item image if available
                    image_path = f"item_images/{game.current_item.lower().replace(' ', '_')}.png"
                    if os.path.exists(image_path):
                        st.image(image_path, caption=game.current_item, width=200)
            
            elif game.phase == "scores":
                st.subheader("Round Complete!")
                
                # Display round results
                if game.imposter_guess == game.current_item:
                    st.success(f"ÔøΩ The Imposter ({game.imposter.name}) won!")
                    st.write(f"Correctly guessed: {game.current_item}")
                else:
                    st.error(f"The Imposter ({game.imposter.name}) lost!")
                    st.write(f"The item was: {game.current_item}")
                
                if game.is_player_host(st.session_state.player_name):
                    st.write("Host Controls:")
                    if st.button("Next Round (Same Domain)", key="same_domain"):
                        # Keep the same domain but reset other round-specific state
                        current_domain = game.current_domain
                        game.reset_round()
                        game.current_domain = current_domain
                        game.select_item()
                        game.start_discussion()
                        save_game_state(game)
                    
                    if st.button("Next Round (New Domain)", key="new_domain"):
                        game.reset_round()
                        save_game_state(game)
                    
                    if st.button("End Game", key="end_game"):
                        game.reset_game()
                        save_game_state(game)

if __name__ == "__main__":
    main()
